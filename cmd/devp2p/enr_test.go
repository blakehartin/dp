package main

import (
	"fmt"
	"github.com/DogeProtocol/dp/crypto"
	"github.com/DogeProtocol/dp/crypto/cryptobase"
	"testing"
)

func TestParseEnr(t *testing.T) {
	enrString1 := "enr:-QrDuQbj3wY-AwMXACDWi-GmTFhrtFvtHCq1YTilkwkE3oB37A0KhpmA7GRRykUn-peFAY1ucfSukOdtoxh02SOo0I3LTO0zkbIX5DML_fWAMl2r6NGGhHdYQiBcVwlNyy5mZcmgc9KCPOQlEr_QFrlQgM5LAyeS5q9FQSqgqKJ2aXRn5knJA8cN_6Td9W6MP3gT5ICqKcUXgzKJP_vlbzbKiJbBaUbUrPKoeKaOBjyq8V2cy8Upgq5oRKOCh8oo1cifZ9tpz745MfRjFsR9lh1XYXHx3F9N-hh7vWxHHbOJr3jWNfotA3bXuIlN26zE6VdPGnhDHeLHZCusmkGLLBWqJ0tC1iEHQsuRhYpqssI6H9Xelo6aZu6AXGf_1pltuNvobOkOJ7wNs1q396WW3AznfGw_B99wzrQmOxRR-PAIwraxwZy-4qMxVZ72UW-Dbdm09Rdki1WtY7_A4rUNzLuY2dGeXmIo7xMC1ZpalJS8_FZvm4MUVelRTNNCjiBprx0zRC0UAr1Sdf81T9Z7g2deOS3IWzvNDdHtZqyUNxUlRd89pnfPY7E4HAU1GxPnPR1FaS6uiQuxTSOJxWtHMpik3CQpdMe__DpUYnuYUkr-GLjwNHqXnjTNHYNhAabOIAnk2IOn_Yb4zE99P_xnxqXR4FjGBozfcFCKVBGANGLokjfH4XOfaJm3NNeQteKrVFrIS1K7tUv32xUlz8N_Un5iHM48rAwpgy2xQwU1xxCoGVUscbzN1nZrZ5CkB8ihqPPE2Tqm7JCWrnj1VPkNc0-lrWRTRS2WY3zZpGiLSYXxL-ElzaP-2zII9AF_l9I1HsDII6zeQeaJI6zkCgSHPA76K5bCp9WE-tA5MFGkM5JiQJx_rSll-nWqkqDCcLrNMOfE1eyTBtctw7fTUBIS2SQ4nI2B3ZB5u9weXCjoF1ZV7pj7DK9Yv21g_h-NZgZS6E1dkzmZ_Xu03Dzkl6H_MieSbJBEUKRaB3a2Ygz5lXIxJKLIetAVL1HbefZXDsTeeu5AMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwLQ5QG-d7Z9pTu-eeTKu0v3HRBkgCEyw-E_FrhEjsulAJc-qFUaXjOGg4IAgTI30IHOrw-xe7CO7HggTSVLOJ2NDmChuJ_Vyo5-CjtdCxojXFuQBI_8NO1QRbdBV2AREsdYg0989XqCQUgqsaw9pQylSSyqBeUfhE1yPffpp-zFt5KTsCHf2oq0PTS6aCM0AIaxuwI0uD2S-BvarInFEKnO6DVCpgqA6W4JKiAd4IxZTFduZaaU3mVYPDDrIoZYN2m7AXaYBW9xh9V2UF9Jpb7DRoH2n27lSeWpKbylLxCJHw9epq9bqhJhtdQL6T3jUk6Q3oYTaBCdEI4llhQfvC5UyilY_TXFN2aBn2oTgOvJ5xObNoReGqMuNpgd2wcsTxUXLsZw7lZnokVnFQ_V5WdMJMc2XiIZPTdltFWDcg4vwV9eX7SU3Va2YyiB-OsVSJzXRY0Tp1cOAiTkA1dl7vI6uC-xqsq6N0p4ZsZDa0TNfmgDwYcC7Say34QJR52vaaGpjyjZ-mLnq5iO7Bm2Amx7LnbPGqjEspUO5YfhE12HbPTxX94cbMYuaMaBum3A2QQikQxSQqtUKNuevA1akmjhbUC6OJV0gidpAOClE1EakNL1s4jSpTOGXzRa5ZQbMtUgnKFwTQ7Hp-3C4XaNtyGelxAi1hHYqimzmLjUIbVRRXaV9-jlBT1tFIoXjIN_tK1h8hLrH4Y4w9mzzUc7iuri0ZXgg3Ye9kClirY5kNusnhxFKghCzwr7UZZrdh-gXVddTuCwmWtMImAY25aDgF0PJFVYa2iclcRBmJ-sJmUAfOolbLhKx9aep4Wet5LhpOsb0GdYHZ34oAiJBL_YAmzI-zshmAxivNs1jhEqvD5SMOqcwhO0wWWWIDkHtBDhOG5ZEF3KWjyLx3uIWlh0BPSuruaAkFVhV3AbU48aj1tSD4IfIOhcUlogBGQsGJiDp7_bVESw7vuB4v8viTuzfi0bcPBk0hwp4mU6ToPtSCVcrEARLpQYMIXZmtjfjYO-BwMk4_yWbdxz5mT5hNyXafGOCy09O5KsSMEZ3Dk2h12edeR3YySXxwr-jdT6VOdMUobSbWDlQVxDZ7qnqRiBAoq7rEpkPRLCpA9LjJnaCewoMyA5-ERii7SPGPhB_l_0sDrFYkjQ50NCKqVHhYYraL3BTAPle_m9dqwMOpGMMvAmZexb1K7TOta1p-J3VCcRrCWm_IPmVt1x8rXYYJP3ezEzwIg2V0aMfGhKGLiw-AgmlkgnY0gmlwhDa3Z0yJc2VjcDI1NmsxuQOhLQ5QG-d7Z9pTu-eeTKu0v3HRBkgCEyw-E_FrhEjsulAJc-qFUaXjOGg4IAgTI30IHOrw-xe7CO7HggTSVLOJ2NDmChuJ_Vyo5-CjtdCxojXFuQBI_8NO1QRbdBV2AREsdYg0989XqCQUgqsaw9pQylSSyqBeUfhE1yPffpp-zFt5KTsCHf2oq0PTS6aCM0AIaxuwI0uD2S-BvarInFEKnO6DVCpgqA6W4JKiAd4IxZTFduZaaU3mVYPDDrIoZYN2m7AXaYBW9xh9V2UF9Jpb7DRoH2n27lSeWpKbylLxCJHw9epq9bqhJhtdQL6T3jUk6Q3oYTaBCdEI4llhQfvC5UyilY_TXFN2aBn2oTgOvJ5xObNoReGqMuNpgd2wcsTxUXLsZw7lZnokVnFQ_V5WdMJMc2XiIZPTdltFWDcg4vwV9eX7SU3Va2YyiB-OsVSJzXRY0Tp1cOAiTkA1dl7vI6uC-xqsq6N0p4ZsZDa0TNfmgDwYcC7Say34QJR52vaaGpjyjZ-mLnq5iO7Bm2Amx7LnbPGqjEspUO5YfhE12HbPTxX94cbMYuaMaBum3A2QQikQxSQqtUKNuevA1akmjhbUC6OJV0gidpAOClE1EakNL1s4jSpTOGXzRa5ZQbMtUgnKFwTQ7Hp-3C4XaNtyGelxAi1hHYqimzmLjUIbVRRXaV9-jlBT1tFIoXjIN_tK1h8hLrH4Y4w9mzzUc7iuri0ZXgg3Ye9kClirY5kNusnhxFKghCzwr7UZZrdh-gXVddTuCwmWtMImAY25aDgF0PJFVYa2iclcRBmJ-sJmUAfOolbLhKx9aep4Wet5LhpOsb0GdYHZ34oAiJBL_YAmzI-zshmAxivNs1jhEqvD5SMOqcwhO0wWWWIDkHtBDhOG5ZEF3KWjyLx3uIWlh0BPSuruaAkFVhV3AbU48aj1tSD4IfIOhcUlogBGQsGJiDp7_bVESw7vuB4v8viTuzfi0bcPBk0hwp4mU6ToPtSCVcrEARLpQYMIXZmtjfjYO-BwMk4_yWbdxz5mT5hNyXafGOCy09O5KsSMEZ3Dk2h12edeR3YySXxwr-jdT6VOdMUobSbWDlQVxDZ7qnqRiBAoq7rEpkPRLCpA9LjJnaCewoMyA5-ERii7SPGPhB_l_0sDrFYkjQ50NCKqVHhYYraL3BTAPle_m9dqwMOpGMMvAmZexb1K7TOta1p-J3VCcRrCWm_IPmVt1x8rXYYJP3ezEzyEc25hcMCDdGNwgnZfg3VkcIJ2Xw"
	enrString2 := "enr:-QrDuQbj3wY-AwMRACBYuY7rmuxiO-eqKGJvubYd5iJQ8RgFpfM1oTQOP-H9uzM6FSHMYg7ThP8mSAh7xtycCuU-0oeo2Syy-un39sYB4bujqMuy0yx48538a8MVxWAzMdg2B1kOi9dN8TUFI3hbBJaYuwyy-zW2WFKpF5Yjcs0do9nPg11fHS5bq9SUh3Al_5alLJlaKWdlVt5yemN_9BIh8r2s-lJNCNoJ10VHMZCcwgI0uqFAs8xRVMtH8aJ1ks1aFPSay8a8nW-bL07jd9l_PQ6y8xiLK19EJxHRY2roHScgiRRrt8oQy5ocqxz3oCNQRuh7leFDrNgle7GwXVxsMQZjHlVvJK5H8g3TR1jYwhs6L6aVfGQNqn8G6T4zpIFBheQGrluya-NdRK2HW3uom33bbTuQ6fbO5U9GXtkRyW0yFnweLRaXpBx1OxKpuApaRr54tFzZ0blIXppL8SSI5nhdubPEwhqcmo0T5_hoxJi_YJYM6uO8yfb22gxdnh3OzdHaCLTr3IkymHOjPGiVrsJPj46k9OeM_1LhRaHLhSfViX-Paq3PMy8UhQepZQsagKNe59c4AgbD0wzDmclr8kcTCE-Jq1v7uewWlW4RIxt8OxRgl-iiQtZNE-yVsmSlVeo_9nBiPOakTe0pxAMqxNexyysqVpNkxofiyFSjWWSbepNzsCfNTthyA80SJ7XE5jIxCl6eJ-Rq9ZFIEiJ_1uYvpTTMxzOyegNZixip7LTqZhT-LgHXXH33GenF-EP7egQrg1O9R1yKBVIycC0w3_N_0c2Z2R7Hl-ueN8sU-ShKongQr7ZP8w0sg9CIyVD6rLl5OP7MuRl3iC12Th3JLcA3cdJ7DNmissTzDY8y05i3DoLfNorTZ1Qndk8V2g5YNAhiHuTc-n8pclfWjDFbXBynrw5vaHjJZhkf3Y2LV7p4n92E00FwRCbRtl0QsUZRf7Y1XpAgZFVbk2NGtiujJTMFblVJ_shraIMrUNt2kTkQ2ntiOBaALoxaMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8MHg2V0aMfGhKGLiw-AgmlkgnY0gmlwhDQ1vj-Jc2VjcDI1NmsxuQOhnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8OEc25hcMCDdGNwgnZfg3VkcIJ2Xw"
	enrString3 := "enr-QrDuQbj3wY-AwMRACBYuY7rmuxiO-eqKGJvubYd5iJQ8RgFpfM1oTQOP-H9uzM6FSHMYg7ThP8mSAh7xtycCuU-0oeo2Syy-un39sYB4bujqMuy0yx48538a8MVxWAzMdg2B1kOi9dN8TUFI3hbBJaYuwyy-zW2WFKpF5Yjcs0do9nPg11fHS5bq9SUh3Al_5alLJlaKWdlVt5yemN_9BIh8r2s-lJNCNoJ10VHMZCcwgI0uqFAs8xRVMtH8aJ1ks1aFPSay8a8nW-bL07jd9l_PQ6y8xiLK19EJxHRY2roHScgiRRrt8oQy5ocqxz3oCNQRuh7leFDrNgle7GwXVxsMQZjHlVvJK5H8g3TR1jYwhs6L6aVfGQNqn8G6T4zpIFBheQGrluya-NdRK2HW3uom33bbTuQ6fbO5U9GXtkRyW0yFnweLRaXpBx1OxKpuApaRr54tFzZ0blIXppL8SSI5nhdubPEwhqcmo0T5_hoxJi_YJYM6uO8yfb22gxdnh3OzdHaCLTr3IkymHOjPGiVrsJPj46k9OeM_1LhRaHLhSfViX-Paq3PMy8UhQepZQsagKNe59c4AgbD0wzDmclr8kcTCE-Jq1v7uewWlW4RIxt8OxRgl-iiQtZNE-yVsmSlVeo_9nBiPOakTe0pxAMqxNexyysqVpNkxofiyFSjWWSbepNzsCfNTthyA80SJ7XE5jIxCl6eJ-Rq9ZFIEiJ_1uYvpTTMxzOyegNZixip7LTqZhT-LgHXXH33GenF-EP7egQrg1O9R1yKBVIycC0w3_N_0c2Z2R7Hl-ueN8sU-ShKongQr7ZP8w0sg9CIyVD6rLl5OP7MuRl3iC12Th3JLcA3cdJ7DNmissTzDY8y05i3DoLfNorTZ1Qndk8V2g5YNAhiHuTc-n8pclfWjDFbXBynrw5vaHjJZhkf3Y2LV7p4n92E00FwRCbRtl0QsUZRf7Y1XpAgZFVbk2NGtiujJTMFblVJ_shraIMrUNt2kTkQ2ntiOBaALoxaMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8MHg2V0aMfGhKGLiw-AgmlkgnY0gmlwhDQ1vj-Jc2VjcDI1NmsxuQOhnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8OEc25hcMCDdGNwgnZfg3VkcIJ2Xw"
	enrString4 := "enr:-rDuQbj3wY-AwMRACBYuY7rmuxiO-eqKGJvubYd5iJQ8RgFpfM1oTQOP-H9uzM6FSHMYg7ThP8mSAh7xtycCuU-0oeo2Syy-un39sYB4bujqMuy0yx48538a8MVxWAzMdg2B1kOi9dN8TUFI3hbBJaYuwyy-zW2WFKpF5Yjcs0do9nPg11fHS5bq9SUh3Al_5alLJlaKWdlVt5yemN_9BIh8r2s-lJNCNoJ10VHMZCcwgI0uqFAs8xRVMtH8aJ1ks1aFPSay8a8nW-bL07jd9l_PQ6y8xiLK19EJxHRY2roHScgiRRrt8oQy5ocqxz3oCNQRuh7leFDrNgle7GwXVxsMQZjHlVvJK5H8g3TR1jYwhs6L6aVfGQNqn8G6T4zpIFBheQGrluya-NdRK2HW3uom33bbTuQ6fbO5U9GXtkRyW0yFnweLRaXpBx1OxKpuApaRr54tFzZ0blIXppL8SSI5nhdubPEwhqcmo0T5_hoxJi_YJYM6uO8yfb22gxdnh3OzdHaCLTr3IkymHOjPGiVrsJPj46k9OeM_1LhRaHLhSfViX-Paq3PMy8UhQepZQsagKNe59c4AgbD0wzDmclr8kcTCE-Jq1v7uewWlW4RIxt8OxRgl-iiQtZNE-yVsmSlVeo_9nBiPOakTe0pxAMqxNexyysqVpNkxofiyFSjWWSbepNzsCfNTthyA80SJ7XE5jIxCl6eJ-Rq9ZFIEiJ_1uYvpTTMxzOyegNZixip7LTqZhT-LgHXXH33GenF-EP7egQrg1O9R1yKBVIycC0w3_N_0c2Z2R7Hl-ueN8sU-ShKongQr7ZP8w0sg9CIyVD6rLl5OP7MuRl3iC12Th3JLcA3cdJ7DNmissTzDY8y05i3DoLfNorTZ1Qndk8V2g5YNAhiHuTc-n8pclfWjDFbXBynrw5vaHjJZhkf3Y2LV7p4n92E00FwRCbRtl0QsUZRf7Y1XpAgZFVbk2NGtiujJTMFblVJ_shraIMrUNt2kTkQ2ntiOBaALoxaMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8MHg2V0aMfGhKGLiw-AgmlkgnY0gmlwhDQ1vj-Jc2VjcDI1NmsxuQOhnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8OEc25hcMCDdGNwgnZfg3VkcIJ2Xw"

	testEnr(enrString1, true, t)
	testEnr(enrString2, true, t)
	testEnr(enrString3, false, t)
	testEnr(enrString4, false, t)
}

func testEnr(enrString string, shouldSucceed bool, t *testing.T) {

	node, err := parseNode(enrString)

	if err != nil {
		if shouldSucceed == true {
			t.Fatal(err)
			t.Fail()
		} else {
			return
		}
	} else {
		if shouldSucceed == false {
			t.Fatal("testEnr succeeded when it should have failed")
			t.Fail()
		}
	}

	fmt.Println("ID", node.ID())
	fmt.Println("IP", node.IP())
	fmt.Println("PubKey", node.Pubkey())
	fmt.Println("Address1", crypto.Keccak256Hash(node.Pubkey().PubData).Hex())
	pub, err := cryptobase.SigAlg.SerializePublicKey(node.Pubkey())
	if err != nil {
		t.Fatal(err)
		t.Fail()
	}
	fmt.Println("Address2", crypto.Keccak256Hash(pub).Hex())

	add, err := cryptobase.SigAlg.PublicKeyToAddress(node.Pubkey())
	if err != nil {
		t.Fatal(err)
		t.Fail()
	}

	fmt.Println("Address3", add)
}
